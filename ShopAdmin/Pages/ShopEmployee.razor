@page "/shopemployee/{shopid}"

@using Entities;
@using ShopAdmin.Data;
@inject NavigationManager nm;
@inject IEmployee em;

<button @onclick="()=>NavigateToAddEmployee(shopid)" class="btn btn-primary">Add Employee</button>


<Table TItem="EntEmployee" DataSource="@data">

    <GenerateColumns Range="0.." Definitions=definitions />

    <ActionColumn Title="Action">
        <Space Size=@("middle")>
            
            <SpaceItem>
                <button style="margin:3px" @onclick="()=>UpdateEmployee(584147)" class="btn btn-primary">Update</button>

            </SpaceItem>
            <SpaceItem>
                <button style="margin:3px" @onclick="()=>DeleteEmployee(584147)" class="btn btn-danger">Delete</button>


            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

                    <button style="margin:3px" @onclick="()=>UpdateEmployee(584147)" class="btn btn-primary">Update</button>
                    <button style="margin:3px" @onclick="()=>DeleteEmployee(584147)" class="btn btn-danger">Delete</button>


@code {
    private List<EntEmployee> listemployee { get; set; } = new List<EntEmployee>();
    EntEmployee[] data = new EntEmployee[] { };

    private int shopid;


    protected override async Task OnInitializedAsync()
    {
        listemployee = await em.GetShopEmployee(shopid);
        data = listemployee.ToArray();

    }

    [Parameter]
    public string Shopid
    {
        get=>shopid.ToString();
        set
        {
            if (int.TryParse(value, out int tryparsed))
            {
                shopid = tryparsed;    
            }
        }
    }

    private async Task NavigateToAddEmployee(int shopid)
    {
        nm.NavigateTo($"/addemployeeshop/{ shopid}");
    }

    private async Task DeleteEmployee(int id)
    {
        await em.DeleteEmployee(id);
        listemployee = await em.GetShopEmployee(shopid);
    }

    [Parameter] public static EntEmployee UpdateBO { get; set; }
    private async Task UpdateEmployee(int id)
    {
        UpdateBO = listemployee.Find(x => x.empid == id);

        nm.NavigateTo($"/addemployeeshop/{shopid}/update");
    }


    void definitions(string propertyName, object column)
    {
        if (propertyName == "Tags")
        {
            var tagCol = ((Column<string[]>)column);

            tagCol.CellRender = cellData =>
    @<span>
        @foreach (var tag in cellData.FieldValue)
        {
            var color = tag.Length > 5 ? "geekblue" : "green";
            if (tag == "loser")
            {
                color = "volcano";
            }
            <Tag Color="@color">@tag</Tag>
        }
    </span>
    ;

            return;
        }
    }
}
