@page "/ownershops/{boid}"
@using ShopAdmin.Data;
@using Entities;

@inject IShop so;
@inject IAllBusinessOwner bo;
@inject NavigationManager nm;



<button @onclick="()=>NavigateToAddShop(boid)" class="btn btn-primary">Add Shop</button>

<Table TItem="EntShop" DataSource="@data">

    <GenerateColumns Range="1.." Definitions=definitions />

    <ActionColumn Title="Action">
        <Space Size=@("middle")>
 
            <SpaceItem>
                <button style="margin:3px" @onclick="()=>NavigateToShopPackages(711170)" class="btn btn-primary">Packages</button>
               
            </SpaceItem>
                    <button style="margin:3px" @onclick="()=>NavigateToShopServices(711170)" class="btn btn-primary">Services</button>

            <SpaceItem>
               
            <button style="margin:3px" @onclick="()=>NavigateToShopEmployee(711170)" class="btn btn-primary">Employee</button>
            </SpaceItem>

            <SpaceItem>
               
                    <button style="margin:3px" @onclick="()=>DeleteShop(711170)" class="btn btn-danger">Delete</button>
            </SpaceItem>

            <SpaceItem>
                    <button style="margin:3px" @onclick="()=>UpdateShop(711170)" class="btn btn-primary">Update</button>
               
            </SpaceItem>

            </Space>
    </ActionColumn>
</Table>

@code
{
    private List<EntShop> ListShop { get; set; } = new List<EntShop>();
    EntShop[] data = new EntShop[] { };


    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }



    private int boid;

    protected override async Task OnInitializedAsync()
    {
        ListShop = await so.GetBusinessOwnerShop(boid);
        data = ListShop.ToArray();
    }

    [Parameter]
    public string Boid
    {
        get => boid.ToString();
        set
        {
            if (int.TryParse(value, out int parsedBoid))
            {
                boid = parsedBoid;
            }
        }
    }

    private async Task NavigateToAddShop(int boid)
    {

        nm.NavigateTo($"/addownershop/{boid}");
    }

    private async Task DeleteShop(int id)
    {

        await so.DeleteShop(id);
        ListShop = await so.GetBusinessOwnerShop(boid);
    }

    private async Task NavigateToShopEmployee(int shopid)
    {
        nm.NavigateTo($"/shopemployee/{shopid}");

    }
    private async Task NavigateToShopServices(int shopid)
    {
        nm.NavigateTo($"/shopservices/{shopid}");
    }

    private async Task NavigateToShopPackages(int shopid)
    {
        nm.NavigateTo($"/shoppackages/{shopid}");
    }


    [Parameter] public static EntShop UpdateBO { get; set; }

    private async Task UpdateShop(int id)
    {
        UpdateBO = ListShop.Find(x => x.shopid == id);
        nm.NavigateTo($"/addownershop/{boid}/update");
    }



    void definitions(string propertyName, object column)
    {
        if (propertyName == "Tags")
        {
            var tagCol = ((Column<string[]>)column);

            tagCol.CellRender = cellData =>
    @<span>
        @foreach (var tag in cellData.FieldValue)
            {
                var color = tag.Length > 5 ? "geekblue" : "green";
                if (tag == "loser")
                {
                    color = "volcano";
                }
                <Tag Color="@color">@tag</Tag>
            }
        </span>
    ;

            return;
        }
    }
}


