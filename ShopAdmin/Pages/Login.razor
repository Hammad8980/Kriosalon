@page "/login"
@using ShopAdmin.Authentication
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authstateprovider
@inject NavigationManager nav

<div class="row">
<div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
<div class="mb-3 text-center">
<h3>LOGIN</h3>
</div>
<div class="mb-3">
<Label>User Name</label>
<input @bind="model.UserName" class="form-control" placeholder="User Name" />
</div>
<div class="mb-3">
<Label>Password</label>

<input @bind="model.Password" type="password" class="form-control" placeholder= "Password" />
</div>
<div class="mb-3 d-grid gap-2">
<button @onclick="Authenticate" class="btn btn-primary">Login</button>
</div>

<div class="mb-3 d-grid gap-2">
<button @onclick="Signup" class="btn btn-primary">SIGN UP</button>
</div>
</div>
</div>

@code {
    private class Model
    {
        public string UserName { get; set;}
        public string Password { get; set; }
    }

    private Model model=new Model();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserName(model.UserName);

        if (userAccount == null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }
        var customÄuthStateProvider = (CustomAuthenticationStateProvider)authstateprovider;
        await customÄuthStateProvider.UpdateAuthenticationState(new UserSession
    {

            UserName = userAccount.UserName,
            Role = userAccount. Role
    });

       nav.NavigateTo("/allbusinessowner", true);
}

    private async Task Signup()
        {
            
        }
}
